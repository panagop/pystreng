{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pystreng","text":"<p>pystreng is a Python package for structural engineering calculations, focusing on Eurocode implementations.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Eurocode 2 Implementations: <ul> <li>Shear resistance calculations (VRdmax)</li> <li>More features coming soon...</li> </ul> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install pystreng\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here's a simple example calculating maximum shear resistance:</p> <pre><code>from pystreng.codes.eurocodes.ec2.ch6.shear import VRdmax\n\n# Calculate VRdmax (maximum shear resistance)\nresult = VRdmax(\n    bw=300,    # web width in mm\n    d=550,     # effective depth in mm\n    fck=30,    # concrete strength in MPa\n    fyk=500,   # reinforcement yield strength in MPa\n    fywk=500,  # stirrup yield strength in MPa\n    \u03b8=0.4,     # strut angle in radians\n    units='N-mm-rad'\n)\nprint(f\"VRdmax = {result:.2f} N\")\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>API Reference: Detailed documentation of all functions and classes</li> <li>Shear Calculations: Detailed explanation of shear resistance calculations</li> </ul>"},{"location":"#development","title":"Development","text":"<p>To contribute or run the documentation locally:</p> <pre><code># Clone the repository\ngit clone https://github.com/panagop/pystreng\ncd pystreng\n\n# Install in development mode with docs extras\npip install -e \".[dev]\"\n\n# Build the documentation\nmkdocs build\n\n# Serve documentation locally\nmkdocs serve\n</code></pre>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#pystreng","title":"<code>pystreng</code>","text":""},{"location":"api/#pystreng-functions","title":"Functions","text":""},{"location":"api/#pystreng.hello","title":"<code>hello()</code>","text":"Source code in <code>src/pystreng/__init__.py</code> <pre><code>def hello() -&gt; str:\n    return \"Hello from pystreng!\"\n</code></pre>"},{"location":"shear/","title":"Shear module","text":"<p>This page documents the public symbols in the <code>pystreng.codes.eurocodes.ec2.ch6.shear</code> module.</p>"},{"location":"shear/#pystreng.codes.eurocodes.ec2.ch6.shear","title":"<code>pystreng.codes.eurocodes.ec2.ch6.shear</code>","text":""},{"location":"shear/#pystreng.codes.eurocodes.ec2.ch6.shear-functions","title":"Functions","text":""},{"location":"shear/#pystreng.codes.eurocodes.ec2.ch6.shear.VRdmax","title":"<code>VRdmax(bw, d, fck, fyk, fywk, \u03b8, \u03b1cw=1.0, \u03b3c=1.5, units='N-mm-rad', include_intermediates=False)</code>","text":"<p>Compute the maximum shear resistance V_Rd,max.</p> <p>The function computes the design shear resistance V_Rd,max. Inputs are expected in millimetres and N/mm\u00b2 when <code>units</code> is 'N-mm-rad' (the default). If <code>units</code> is 'kN-m-rad' then inputs are interpreted in kN/m units where appropriate and the returned <code>value</code> will be in kN.</p> <p>Parameters:</p> Name Type Description Default <code>bw</code> <code>float</code> <p>Smallest width of the cross-section in the tensile area [mm].</p> required <code>d</code> <code>float</code> <p>Effective depth of the cross-section [mm].</p> required <code>fck</code> <code>float</code> <p>Characteristic concrete strength [N/mm\u00b2].</p> required <code>fyk</code> <code>float</code> <p>Characteristic yield strength of reinforcement [N/mm\u00b2].</p> required <code>fywk</code> <code>float</code> <p>Characteristic yield strength of welded shear reinforcement [N/mm\u00b2].</p> required <code>\u03b8</code> <code>float</code> <p>Angle between the concrete compression strut and beam axis [rad].</p> required <code>\u03b1cw</code> <code>float</code> <p>Coefficient accounting for the state of stress in the compression chord.</p> <code>1.0</code> <code>\u03b3c</code> <code>float</code> <p>Partial safety factor for concrete (default 1.5).</p> <code>1.5</code> <code>units</code> <code>str</code> <p>Unit system, one of 'N-mm-rad' (default) or 'kN-m-rad'.</p> <code>'N-mm-rad'</code> <code>include_intermediates</code> <code>bool</code> <p>If True, return a dict with intermediate values; otherwise return the numeric value.</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[float, Dict[str, float]]</code> <p>float or dict: If <code>include_intermediates</code> is False, returns the shear resistance</p> <code>Union[float, Dict[str, float]]</code> <p>as a float (units depend on the <code>units</code> argument). If True, returns a dict with</p> <code>Union[float, Dict[str, float]]</code> <p>keys 'value', 'z', 'fcd' and 'v1' containing intermediate values.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an unsupported <code>units</code> string is provided.</p> Notes <p>The expression used is::</p> <pre><code>V_{Rd,max} = \u03b1_cw * b_w * z * \u03bd_1 * f_cd / (cot \u03b8 + tan \u03b8)\n</code></pre> Example <p>import numpy as np VRdmax(250., 539., 20., 500., 500., np.pi/4)</p> Source code in <code>src/pystreng/codes/eurocodes/ec2/ch6/shear.py</code> <pre><code>def VRdmax(\n    bw: float,\n    d: float,\n    fck: float,\n    fyk: float,\n    fywk: float,\n    \u03b8: float,\n    \u03b1cw: float = 1.0,\n    \u03b3c: float = 1.5,\n    units: str = \"N-mm-rad\",\n    include_intermediates: bool = False,\n) -&gt; Union[float, Dict[str, float]]:\n    \"\"\"Compute the maximum shear resistance V_Rd,max.\n\n    The function computes the design shear resistance V_Rd,max. Inputs are expected in\n    millimetres and N/mm\u00b2 when `units` is 'N-mm-rad' (the default). If `units` is\n    'kN-m-rad' then inputs are interpreted in kN/m units where appropriate and the\n    returned `value` will be in kN.\n\n    Args:\n        bw: Smallest width of the cross-section in the tensile area [mm].\n        d: Effective depth of the cross-section [mm].\n        fck: Characteristic concrete strength [N/mm\u00b2].\n        fyk: Characteristic yield strength of reinforcement [N/mm\u00b2].\n        fywk: Characteristic yield strength of welded shear reinforcement [N/mm\u00b2].\n        \u03b8: Angle between the concrete compression strut and beam axis [rad].\n        \u03b1cw: Coefficient accounting for the state of stress in the compression chord.\n        \u03b3c: Partial safety factor for concrete (default 1.5).\n        units: Unit system, one of 'N-mm-rad' (default) or 'kN-m-rad'.\n        include_intermediates: If True, return a dict with intermediate values; otherwise return the numeric value.\n\n    Returns:\n        float or dict: If `include_intermediates` is False, returns the shear resistance\n        as a float (units depend on the `units` argument). If True, returns a dict with\n        keys 'value', 'z', 'fcd' and 'v1' containing intermediate values.\n\n    Raises:\n        ValueError: If an unsupported `units` string is provided.\n\n    Notes:\n        The expression used is::\n\n            V_{Rd,max} = \u03b1_cw * b_w * z * \u03bd_1 * f_cd / (cot \u03b8 + tan \u03b8)\n\n    Example:\n        &gt;&gt;&gt; import numpy as np\n        &gt;&gt;&gt; VRdmax(250., 539., 20., 500., 500., np.pi/4)\n\n    \"\"\"\n    if units not in (\"N-mm-rad\", \"kN-m-rad\"):\n        raise ValueError(f\"Unsupported units: {units!r}. Use 'N-mm-rad' or 'kN-m-rad'.\")\n\n    # Work in consistent base units (N-mm-rad) for intermediates\n    bw_work = float(bw)\n    d_work = float(d)\n    fck_work = float(fck)\n    fyk_work = float(fyk)\n    fywk_work = float(fywk)\n\n    if units == \"kN-m-rad\":\n        # convert kN-m to N-mm where appropriate: 1 kN = 1000 N, 1 m = 1000 mm\n        bw_work *= 1000.0\n        d_work *= 1000.0\n        fck_work *= 0.001\n        fyk_work *= 0.001\n        fywk_work *= 0.001\n\n    z = 0.9 * d_work\n    fcd = fck_work / \u03b3c\n\n    if fywk_work &lt; 0.8 * fyk_work:\n        if fck_work &lt;= 60:\n            v1 = 0.6\n        else:\n            v1 = max(0.5, 0.9 - fck_work / 200.0)\n    else:\n        v1 = 0.6 * (1.0 - fck_work / 250.0)\n\n    value = \u03b1cw * bw_work * z * v1 * fcd / (math.tan(\u03b8) + 1.0 / math.tan(\u03b8))\n\n    if units == \"kN-m-rad\":\n        # convert back to kN-m units for the returned value\n        value *= 0.001\n\n    intermediates = {\"z\": z, \"fcd\": fcd, \"v1\": v1, \"value\": value}\n\n    if include_intermediates:\n        return intermediates\n    return intermediates[\"value\"]\n</code></pre>"},{"location":"shear/#examples","title":"Examples","text":"<p>Simple call returning the numeric design shear resistance::</p> <p>from pystreng.codes.eurocodes.ec2.ch6.shear import VRdmax VRdmax(250.0, 539.0, 20.0, 500.0, 500.0, 0.78539816339)</p> <p>Get intermediate values and the computed result::</p> <p>VRdmax(250.0, 539.0, 20.0, 500.0, 500.0, 0.78539816339, include_intermediates=True)</p>"},{"location":"shear/#formula","title":"Formula","text":"<p>The expression used is:</p> \\[ V_{Rd,\\max} = \\frac{\\alpha_{cw} \\; b_w \\; z \\; \\nu_1 \\; f_{cd}}{\\cot\\theta + \\tan\\theta} \\]"}]}